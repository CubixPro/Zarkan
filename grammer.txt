3 piece shit
*****1. expression
*****2. term
*****3. factor
*****4. atom

statements    : newline* statement (newline + statement)* newline
              
statement     : KEYWORD: return expr?
              : KEYWORD: continue
              : KEYWORD: break
              : expr

expression    : keyword: var identifier EQ expr
              : comp-expr((AND | OR) comp-expr)*
              
comp-expr     : NOT comp-expr
              : arith_expr ((EE| LT| GT| LTE| GTE) arith_expr)

arith-expr    : term((plus|minus) term)*

term          : factor((mul|div) factor)*

factor        : (plus|minus) factor
              : power

power         :  call (POW factor)*    

call          : atom (lparen (expr(comma expr)*)? rparen)?

atom          : int | float | identifier | string
              : lparen expr rparen
              : if-expr rule
              : list_expr
              : for-expr
              : while-expr
              : func definition

list-expr     : LSQUARE (expr(comma expr)*)? RSQUARE

if-expr       : KEYWORD: if expr KEYWORD: then
                    (statement if-expr-elif| if-expr-else?)
                    | (newline statements KEYWORD:end | if-expr-elif | if-expr-else)

if-expr-elif   : KEYWORD: elif expr KEYWORD: then
                    (expr if-expr-elif| if-expr-else?)
                    | (newline statements KEYWORD:end | if-expr-elif | if-expr-else)

if-expr-else  : KEYWORD: else
                expr
                | (newline statements KEYWORD: end)

for-expr      : KEYWORD:for identifier EQ expr KEYWORD:to expr
                (KEYWORD:step expr)? KEYWORD:then
                statement
                | (newline statements KEYWORD: end)

while-expr    : KEYWORD:while expr KEYWORD:then 
                statement
                | (newline statements KEYWORD: end)

func-def      : KEYWORD:func identifier
                lparen (identifier(comma identifier)*)? rparen
                arrow expr
                | (newline statements KEYWORD: end)


* = 0 or more
? = optional